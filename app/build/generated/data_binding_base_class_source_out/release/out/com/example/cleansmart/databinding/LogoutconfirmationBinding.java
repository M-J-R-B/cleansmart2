// Generated by view binder compiler. Do not edit!
package com.example.cleansmart.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cleansmart.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LogoutconfirmationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout aboutLayout;

  @NonNull
  public final LinearLayout accountLayout;

  @NonNull
  public final ImageButton backButton;

  @NonNull
  public final LinearLayout darkModeLayout;

  @NonNull
  public final LinearLayout inviteLayout;

  @NonNull
  public final LinearLayout languageLayout;

  @NonNull
  public final LinearLayout logoutLayout;

  @NonNull
  public final LinearLayout notificationsLayout;

  @NonNull
  public final LinearLayout privacyLayout;

  @NonNull
  public final LinearLayout securityLayout;

  @NonNull
  public final LinearLayout termsLayout;

  @NonNull
  public final LinearLayout toolbar;

  private LogoutconfirmationBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout aboutLayout, @NonNull LinearLayout accountLayout,
      @NonNull ImageButton backButton, @NonNull LinearLayout darkModeLayout,
      @NonNull LinearLayout inviteLayout, @NonNull LinearLayout languageLayout,
      @NonNull LinearLayout logoutLayout, @NonNull LinearLayout notificationsLayout,
      @NonNull LinearLayout privacyLayout, @NonNull LinearLayout securityLayout,
      @NonNull LinearLayout termsLayout, @NonNull LinearLayout toolbar) {
    this.rootView = rootView;
    this.aboutLayout = aboutLayout;
    this.accountLayout = accountLayout;
    this.backButton = backButton;
    this.darkModeLayout = darkModeLayout;
    this.inviteLayout = inviteLayout;
    this.languageLayout = languageLayout;
    this.logoutLayout = logoutLayout;
    this.notificationsLayout = notificationsLayout;
    this.privacyLayout = privacyLayout;
    this.securityLayout = securityLayout;
    this.termsLayout = termsLayout;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LogoutconfirmationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LogoutconfirmationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.logoutconfirmation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LogoutconfirmationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aboutLayout;
      LinearLayout aboutLayout = ViewBindings.findChildViewById(rootView, id);
      if (aboutLayout == null) {
        break missingId;
      }

      id = R.id.accountLayout;
      LinearLayout accountLayout = ViewBindings.findChildViewById(rootView, id);
      if (accountLayout == null) {
        break missingId;
      }

      id = R.id.backButton;
      ImageButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.darkModeLayout;
      LinearLayout darkModeLayout = ViewBindings.findChildViewById(rootView, id);
      if (darkModeLayout == null) {
        break missingId;
      }

      id = R.id.inviteLayout;
      LinearLayout inviteLayout = ViewBindings.findChildViewById(rootView, id);
      if (inviteLayout == null) {
        break missingId;
      }

      id = R.id.languageLayout;
      LinearLayout languageLayout = ViewBindings.findChildViewById(rootView, id);
      if (languageLayout == null) {
        break missingId;
      }

      id = R.id.logoutLayout;
      LinearLayout logoutLayout = ViewBindings.findChildViewById(rootView, id);
      if (logoutLayout == null) {
        break missingId;
      }

      id = R.id.notificationsLayout;
      LinearLayout notificationsLayout = ViewBindings.findChildViewById(rootView, id);
      if (notificationsLayout == null) {
        break missingId;
      }

      id = R.id.privacyLayout;
      LinearLayout privacyLayout = ViewBindings.findChildViewById(rootView, id);
      if (privacyLayout == null) {
        break missingId;
      }

      id = R.id.securityLayout;
      LinearLayout securityLayout = ViewBindings.findChildViewById(rootView, id);
      if (securityLayout == null) {
        break missingId;
      }

      id = R.id.termsLayout;
      LinearLayout termsLayout = ViewBindings.findChildViewById(rootView, id);
      if (termsLayout == null) {
        break missingId;
      }

      id = R.id.toolbar;
      LinearLayout toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new LogoutconfirmationBinding((ConstraintLayout) rootView, aboutLayout, accountLayout,
          backButton, darkModeLayout, inviteLayout, languageLayout, logoutLayout,
          notificationsLayout, privacyLayout, securityLayout, termsLayout, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
