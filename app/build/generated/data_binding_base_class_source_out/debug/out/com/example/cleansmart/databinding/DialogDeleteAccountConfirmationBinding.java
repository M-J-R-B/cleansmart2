// Generated by view binder compiler. Do not edit!
package com.example.cleansmart.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cleansmart.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogDeleteAccountConfirmationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton cancelButton;

  @NonNull
  public final TextInputEditText confirmationInput;

  @NonNull
  public final TextInputLayout confirmationInputLayout;

  @NonNull
  public final MaterialButton deleteButton;

  @NonNull
  public final TextView deleteQuestionText;

  @NonNull
  public final TextView deleteTitleText;

  @NonNull
  public final TextInputEditText emailInput;

  @NonNull
  public final TextInputLayout emailInputLayout;

  @NonNull
  public final TextInputEditText passwordInput;

  @NonNull
  public final TextInputLayout passwordInputLayout;

  private DialogDeleteAccountConfirmationBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton cancelButton, @NonNull TextInputEditText confirmationInput,
      @NonNull TextInputLayout confirmationInputLayout, @NonNull MaterialButton deleteButton,
      @NonNull TextView deleteQuestionText, @NonNull TextView deleteTitleText,
      @NonNull TextInputEditText emailInput, @NonNull TextInputLayout emailInputLayout,
      @NonNull TextInputEditText passwordInput, @NonNull TextInputLayout passwordInputLayout) {
    this.rootView = rootView;
    this.cancelButton = cancelButton;
    this.confirmationInput = confirmationInput;
    this.confirmationInputLayout = confirmationInputLayout;
    this.deleteButton = deleteButton;
    this.deleteQuestionText = deleteQuestionText;
    this.deleteTitleText = deleteTitleText;
    this.emailInput = emailInput;
    this.emailInputLayout = emailInputLayout;
    this.passwordInput = passwordInput;
    this.passwordInputLayout = passwordInputLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogDeleteAccountConfirmationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogDeleteAccountConfirmationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_delete_account_confirmation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogDeleteAccountConfirmationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancelButton;
      MaterialButton cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.confirmationInput;
      TextInputEditText confirmationInput = ViewBindings.findChildViewById(rootView, id);
      if (confirmationInput == null) {
        break missingId;
      }

      id = R.id.confirmationInputLayout;
      TextInputLayout confirmationInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (confirmationInputLayout == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      MaterialButton deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.deleteQuestionText;
      TextView deleteQuestionText = ViewBindings.findChildViewById(rootView, id);
      if (deleteQuestionText == null) {
        break missingId;
      }

      id = R.id.deleteTitleText;
      TextView deleteTitleText = ViewBindings.findChildViewById(rootView, id);
      if (deleteTitleText == null) {
        break missingId;
      }

      id = R.id.emailInput;
      TextInputEditText emailInput = ViewBindings.findChildViewById(rootView, id);
      if (emailInput == null) {
        break missingId;
      }

      id = R.id.emailInputLayout;
      TextInputLayout emailInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (emailInputLayout == null) {
        break missingId;
      }

      id = R.id.passwordInput;
      TextInputEditText passwordInput = ViewBindings.findChildViewById(rootView, id);
      if (passwordInput == null) {
        break missingId;
      }

      id = R.id.passwordInputLayout;
      TextInputLayout passwordInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (passwordInputLayout == null) {
        break missingId;
      }

      return new DialogDeleteAccountConfirmationBinding((ConstraintLayout) rootView, cancelButton,
          confirmationInput, confirmationInputLayout, deleteButton, deleteQuestionText,
          deleteTitleText, emailInput, emailInputLayout, passwordInput, passwordInputLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
